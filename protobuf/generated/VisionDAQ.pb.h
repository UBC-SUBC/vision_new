// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VisionDAQ.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_VisionDAQ_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_VisionDAQ_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_VisionDAQ_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_VisionDAQ_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_VisionDAQ_2eproto;
namespace VisionDAQ {
class FromDAQ;
struct FromDAQDefaultTypeInternal;
extern FromDAQDefaultTypeInternal _FromDAQ_default_instance_;
}  // namespace VisionDAQ
PROTOBUF_NAMESPACE_OPEN
template<> ::VisionDAQ::FromDAQ* Arena::CreateMaybeMessage<::VisionDAQ::FromDAQ>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace VisionDAQ {

// ===================================================================

class FromDAQ final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VisionDAQ.FromDAQ) */ {
 public:
  inline FromDAQ() : FromDAQ(nullptr) {}
  ~FromDAQ() override;
  explicit PROTOBUF_CONSTEXPR FromDAQ(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FromDAQ(const FromDAQ& from);
  FromDAQ(FromDAQ&& from) noexcept
    : FromDAQ() {
    *this = ::std::move(from);
  }

  inline FromDAQ& operator=(const FromDAQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline FromDAQ& operator=(FromDAQ&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FromDAQ& default_instance() {
    return *internal_default_instance();
  }
  static inline const FromDAQ* internal_default_instance() {
    return reinterpret_cast<const FromDAQ*>(
               &_FromDAQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FromDAQ& a, FromDAQ& b) {
    a.Swap(&b);
  }
  inline void Swap(FromDAQ* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FromDAQ* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FromDAQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FromDAQ>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FromDAQ& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FromDAQ& from) {
    FromDAQ::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FromDAQ* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VisionDAQ.FromDAQ";
  }
  protected:
  explicit FromDAQ(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kYawFieldNumber = 1,
    kPitchFieldNumber = 2,
    kRpmFieldNumber = 3,
    kSpeedFieldNumber = 4,
    kDepthFieldNumber = 5,
    kBatteryFieldNumber = 6,
  };
  // required int32 yaw = 1;
  bool has_yaw() const;
  private:
  bool _internal_has_yaw() const;
  public:
  void clear_yaw();
  int32_t yaw() const;
  void set_yaw(int32_t value);
  private:
  int32_t _internal_yaw() const;
  void _internal_set_yaw(int32_t value);
  public:

  // required int32 pitch = 2;
  bool has_pitch() const;
  private:
  bool _internal_has_pitch() const;
  public:
  void clear_pitch();
  int32_t pitch() const;
  void set_pitch(int32_t value);
  private:
  int32_t _internal_pitch() const;
  void _internal_set_pitch(int32_t value);
  public:

  // required int32 rpm = 3;
  bool has_rpm() const;
  private:
  bool _internal_has_rpm() const;
  public:
  void clear_rpm();
  int32_t rpm() const;
  void set_rpm(int32_t value);
  private:
  int32_t _internal_rpm() const;
  void _internal_set_rpm(int32_t value);
  public:

  // required int32 speed = 4;
  bool has_speed() const;
  private:
  bool _internal_has_speed() const;
  public:
  void clear_speed();
  int32_t speed() const;
  void set_speed(int32_t value);
  private:
  int32_t _internal_speed() const;
  void _internal_set_speed(int32_t value);
  public:

  // required int32 depth = 5;
  bool has_depth() const;
  private:
  bool _internal_has_depth() const;
  public:
  void clear_depth();
  int32_t depth() const;
  void set_depth(int32_t value);
  private:
  int32_t _internal_depth() const;
  void _internal_set_depth(int32_t value);
  public:

  // required bool battery = 6;
  bool has_battery() const;
  private:
  bool _internal_has_battery() const;
  public:
  void clear_battery();
  bool battery() const;
  void set_battery(bool value);
  private:
  bool _internal_battery() const;
  void _internal_set_battery(bool value);
  public:

  // @@protoc_insertion_point(class_scope:VisionDAQ.FromDAQ)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t yaw_;
    int32_t pitch_;
    int32_t rpm_;
    int32_t speed_;
    int32_t depth_;
    bool battery_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_VisionDAQ_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FromDAQ

// required int32 yaw = 1;
inline bool FromDAQ::_internal_has_yaw() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FromDAQ::has_yaw() const {
  return _internal_has_yaw();
}
inline void FromDAQ::clear_yaw() {
  _impl_.yaw_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t FromDAQ::_internal_yaw() const {
  return _impl_.yaw_;
}
inline int32_t FromDAQ::yaw() const {
  // @@protoc_insertion_point(field_get:VisionDAQ.FromDAQ.yaw)
  return _internal_yaw();
}
inline void FromDAQ::_internal_set_yaw(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.yaw_ = value;
}
inline void FromDAQ::set_yaw(int32_t value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:VisionDAQ.FromDAQ.yaw)
}

// required int32 pitch = 2;
inline bool FromDAQ::_internal_has_pitch() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FromDAQ::has_pitch() const {
  return _internal_has_pitch();
}
inline void FromDAQ::clear_pitch() {
  _impl_.pitch_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t FromDAQ::_internal_pitch() const {
  return _impl_.pitch_;
}
inline int32_t FromDAQ::pitch() const {
  // @@protoc_insertion_point(field_get:VisionDAQ.FromDAQ.pitch)
  return _internal_pitch();
}
inline void FromDAQ::_internal_set_pitch(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.pitch_ = value;
}
inline void FromDAQ::set_pitch(int32_t value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:VisionDAQ.FromDAQ.pitch)
}

// required int32 rpm = 3;
inline bool FromDAQ::_internal_has_rpm() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FromDAQ::has_rpm() const {
  return _internal_has_rpm();
}
inline void FromDAQ::clear_rpm() {
  _impl_.rpm_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t FromDAQ::_internal_rpm() const {
  return _impl_.rpm_;
}
inline int32_t FromDAQ::rpm() const {
  // @@protoc_insertion_point(field_get:VisionDAQ.FromDAQ.rpm)
  return _internal_rpm();
}
inline void FromDAQ::_internal_set_rpm(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.rpm_ = value;
}
inline void FromDAQ::set_rpm(int32_t value) {
  _internal_set_rpm(value);
  // @@protoc_insertion_point(field_set:VisionDAQ.FromDAQ.rpm)
}

// required int32 speed = 4;
inline bool FromDAQ::_internal_has_speed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FromDAQ::has_speed() const {
  return _internal_has_speed();
}
inline void FromDAQ::clear_speed() {
  _impl_.speed_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t FromDAQ::_internal_speed() const {
  return _impl_.speed_;
}
inline int32_t FromDAQ::speed() const {
  // @@protoc_insertion_point(field_get:VisionDAQ.FromDAQ.speed)
  return _internal_speed();
}
inline void FromDAQ::_internal_set_speed(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.speed_ = value;
}
inline void FromDAQ::set_speed(int32_t value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:VisionDAQ.FromDAQ.speed)
}

// required int32 depth = 5;
inline bool FromDAQ::_internal_has_depth() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FromDAQ::has_depth() const {
  return _internal_has_depth();
}
inline void FromDAQ::clear_depth() {
  _impl_.depth_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t FromDAQ::_internal_depth() const {
  return _impl_.depth_;
}
inline int32_t FromDAQ::depth() const {
  // @@protoc_insertion_point(field_get:VisionDAQ.FromDAQ.depth)
  return _internal_depth();
}
inline void FromDAQ::_internal_set_depth(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.depth_ = value;
}
inline void FromDAQ::set_depth(int32_t value) {
  _internal_set_depth(value);
  // @@protoc_insertion_point(field_set:VisionDAQ.FromDAQ.depth)
}

// required bool battery = 6;
inline bool FromDAQ::_internal_has_battery() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool FromDAQ::has_battery() const {
  return _internal_has_battery();
}
inline void FromDAQ::clear_battery() {
  _impl_.battery_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool FromDAQ::_internal_battery() const {
  return _impl_.battery_;
}
inline bool FromDAQ::battery() const {
  // @@protoc_insertion_point(field_get:VisionDAQ.FromDAQ.battery)
  return _internal_battery();
}
inline void FromDAQ::_internal_set_battery(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.battery_ = value;
}
inline void FromDAQ::set_battery(bool value) {
  _internal_set_battery(value);
  // @@protoc_insertion_point(field_set:VisionDAQ.FromDAQ.battery)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace VisionDAQ

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_VisionDAQ_2eproto
