// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VisionDAQ.proto

#include "VisionDAQ.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace VisionDAQ {
PROTOBUF_CONSTEXPR FromDAQ::FromDAQ(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.yaw_)*/0
  , /*decltype(_impl_.pitch_)*/0
  , /*decltype(_impl_.rpm_)*/0
  , /*decltype(_impl_.speed_)*/0
  , /*decltype(_impl_.depth_)*/0
  , /*decltype(_impl_.battery_)*/false} {}
struct FromDAQDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FromDAQDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FromDAQDefaultTypeInternal() {}
  union {
    FromDAQ _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FromDAQDefaultTypeInternal _FromDAQ_default_instance_;
}  // namespace VisionDAQ
static ::_pb::Metadata file_level_metadata_VisionDAQ_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_VisionDAQ_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_VisionDAQ_2eproto = nullptr;

const uint32_t TableStruct_VisionDAQ_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::VisionDAQ::FromDAQ, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::VisionDAQ::FromDAQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::VisionDAQ::FromDAQ, _impl_.yaw_),
  PROTOBUF_FIELD_OFFSET(::VisionDAQ::FromDAQ, _impl_.pitch_),
  PROTOBUF_FIELD_OFFSET(::VisionDAQ::FromDAQ, _impl_.rpm_),
  PROTOBUF_FIELD_OFFSET(::VisionDAQ::FromDAQ, _impl_.speed_),
  PROTOBUF_FIELD_OFFSET(::VisionDAQ::FromDAQ, _impl_.depth_),
  PROTOBUF_FIELD_OFFSET(::VisionDAQ::FromDAQ, _impl_.battery_),
  0,
  1,
  2,
  3,
  4,
  5,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, -1, sizeof(::VisionDAQ::FromDAQ)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::VisionDAQ::_FromDAQ_default_instance_._instance,
};

const char descriptor_table_protodef_VisionDAQ_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017VisionDAQ.proto\022\tVisionDAQ\"a\n\007FromDAQ\022"
  "\013\n\003yaw\030\001 \002(\005\022\r\n\005pitch\030\002 \002(\005\022\013\n\003rpm\030\003 \002(\005"
  "\022\r\n\005speed\030\004 \002(\005\022\r\n\005depth\030\005 \002(\005\022\017\n\007batter"
  "y\030\006 \002(\010"
  ;
static ::_pbi::once_flag descriptor_table_VisionDAQ_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_VisionDAQ_2eproto = {
    false, false, 127, descriptor_table_protodef_VisionDAQ_2eproto,
    "VisionDAQ.proto",
    &descriptor_table_VisionDAQ_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_VisionDAQ_2eproto::offsets,
    file_level_metadata_VisionDAQ_2eproto, file_level_enum_descriptors_VisionDAQ_2eproto,
    file_level_service_descriptors_VisionDAQ_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_VisionDAQ_2eproto_getter() {
  return &descriptor_table_VisionDAQ_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_VisionDAQ_2eproto(&descriptor_table_VisionDAQ_2eproto);
namespace VisionDAQ {

// ===================================================================

class FromDAQ::_Internal {
 public:
  using HasBits = decltype(std::declval<FromDAQ>()._impl_._has_bits_);
  static void set_has_yaw(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pitch(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rpm(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_depth(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_battery(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003f) ^ 0x0000003f) != 0;
  }
};

FromDAQ::FromDAQ(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:VisionDAQ.FromDAQ)
}
FromDAQ::FromDAQ(const FromDAQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FromDAQ* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.yaw_){}
    , decltype(_impl_.pitch_){}
    , decltype(_impl_.rpm_){}
    , decltype(_impl_.speed_){}
    , decltype(_impl_.depth_){}
    , decltype(_impl_.battery_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.yaw_, &from._impl_.yaw_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.battery_) -
    reinterpret_cast<char*>(&_impl_.yaw_)) + sizeof(_impl_.battery_));
  // @@protoc_insertion_point(copy_constructor:VisionDAQ.FromDAQ)
}

inline void FromDAQ::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.yaw_){0}
    , decltype(_impl_.pitch_){0}
    , decltype(_impl_.rpm_){0}
    , decltype(_impl_.speed_){0}
    , decltype(_impl_.depth_){0}
    , decltype(_impl_.battery_){false}
  };
}

FromDAQ::~FromDAQ() {
  // @@protoc_insertion_point(destructor:VisionDAQ.FromDAQ)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FromDAQ::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FromDAQ::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FromDAQ::Clear() {
// @@protoc_insertion_point(message_clear_start:VisionDAQ.FromDAQ)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.yaw_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.battery_) -
        reinterpret_cast<char*>(&_impl_.yaw_)) + sizeof(_impl_.battery_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FromDAQ::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 yaw = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_yaw(&has_bits);
          _impl_.yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 pitch = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_pitch(&has_bits);
          _impl_.pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 rpm = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_rpm(&has_bits);
          _impl_.rpm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 speed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_speed(&has_bits);
          _impl_.speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 depth = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_depth(&has_bits);
          _impl_.depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool battery = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_battery(&has_bits);
          _impl_.battery_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FromDAQ::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VisionDAQ.FromDAQ)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 yaw = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_yaw(), target);
  }

  // required int32 pitch = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_pitch(), target);
  }

  // required int32 rpm = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_rpm(), target);
  }

  // required int32 speed = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_speed(), target);
  }

  // required int32 depth = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_depth(), target);
  }

  // required bool battery = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_battery(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VisionDAQ.FromDAQ)
  return target;
}

size_t FromDAQ::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:VisionDAQ.FromDAQ)
  size_t total_size = 0;

  if (_internal_has_yaw()) {
    // required int32 yaw = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_yaw());
  }

  if (_internal_has_pitch()) {
    // required int32 pitch = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pitch());
  }

  if (_internal_has_rpm()) {
    // required int32 rpm = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rpm());
  }

  if (_internal_has_speed()) {
    // required int32 speed = 4;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_speed());
  }

  if (_internal_has_depth()) {
    // required int32 depth = 5;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_depth());
  }

  if (_internal_has_battery()) {
    // required bool battery = 6;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t FromDAQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VisionDAQ.FromDAQ)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required int32 yaw = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_yaw());

    // required int32 pitch = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pitch());

    // required int32 rpm = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rpm());

    // required int32 speed = 4;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_speed());

    // required int32 depth = 5;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_depth());

    // required bool battery = 6;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FromDAQ::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FromDAQ::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FromDAQ::GetClassData() const { return &_class_data_; }


void FromDAQ::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FromDAQ*>(&to_msg);
  auto& from = static_cast<const FromDAQ&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:VisionDAQ.FromDAQ)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.yaw_ = from._impl_.yaw_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.pitch_ = from._impl_.pitch_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.rpm_ = from._impl_.rpm_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.speed_ = from._impl_.speed_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.depth_ = from._impl_.depth_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.battery_ = from._impl_.battery_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FromDAQ::CopyFrom(const FromDAQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VisionDAQ.FromDAQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FromDAQ::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void FromDAQ::InternalSwap(FromDAQ* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FromDAQ, _impl_.battery_)
      + sizeof(FromDAQ::_impl_.battery_)
      - PROTOBUF_FIELD_OFFSET(FromDAQ, _impl_.yaw_)>(
          reinterpret_cast<char*>(&_impl_.yaw_),
          reinterpret_cast<char*>(&other->_impl_.yaw_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FromDAQ::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_VisionDAQ_2eproto_getter, &descriptor_table_VisionDAQ_2eproto_once,
      file_level_metadata_VisionDAQ_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace VisionDAQ
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::VisionDAQ::FromDAQ*
Arena::CreateMaybeMessage< ::VisionDAQ::FromDAQ >(Arena* arena) {
  return Arena::CreateMessageInternal< ::VisionDAQ::FromDAQ >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
